#
# This is minimal MicroPython variant of run-tests.py script, which uses
# .exp files as generated by run-tests.py --write-exp. It is useful to run
# testsuite on systems which have neither CPython3 nor unix shell.
# This script is intended to be run by the same interpreter executable
# which is to be tested, so should use minimal language functionality.
#
import usys as sys
import uos as os


tests = ["basics", "micropython", "float", "import", "io", " misc", "unicode", "extmod", "unix"]

MICROPYTHON = "micropython.exe" if sys.platform == "win32" else "micropython"


def should_skip(test):
    if test.startswith("native"):
        return True
    if test.startswith("viper"):
        return True


test_count = 0
passed_count = 0
skip_count = 0

for suite in tests:
    # print("Running in: %s" % suite)
    if sys.platform == "win32":
        # dir /b prints only contained filenames, one on a line
        # http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/dir.mspx
        r = os.system(f"dir /b {suite}/*.py >tests.lst")
    else:
        r = os.system(f"ls {suite}/*.py | xargs -n1 basename >tests.lst")
    assert r == 0

    with open("tests.lst") as f:
        testcases = f.readlines()
        testcases = [l[:-1] for l in testcases]
    assert testcases, f"No tests found in dir '{suite}', which is implausible"
    # print(testcases)
    for t in testcases:
        if t == "native_check.py":
            continue

        qtest = f"{suite}/{t}"

        if should_skip(t):
            print(f"skip {qtest}")
            skip_count += 1
            continue

        exp = None
        try:
            with open(f"{qtest}.exp") as f:
                exp = f.read()
        except OSError:
            pass

        if exp is not None:
            # print("run " + qtest)
            r = os.system(f"{MICROPYTHON} {qtest} >.tst.out")
            if r == 0:
                with open(".tst.out") as f:
                    out = f.read()
            else:
                out = "CRASH"

            if out == "SKIP\n":
                print(f"skip {qtest}")
                skip_count += 1
            else:
                if out == exp:
                    print(f"pass {qtest}")
                    passed_count += 1
                else:
                    print(f"FAIL {qtest}")

                test_count += 1
        else:
            skip_count += 1

print(f"{test_count} tests performed")
print(f"{passed_count} tests passed")
if test_count != passed_count:
    print(f"{test_count - passed_count} tests failed")
if skip_count:
    print(f"{skip_count} tests skipped")
